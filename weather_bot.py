from __future__ import annotations

import asyncio
import os
import re
import sys
from datetime import datetime, time as dtime
from pathlib import Path
from typing import Final
from collections import defaultdict

import requests
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import (
    Application,
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
from zoneinfo import ZoneInfo

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

OWM_API_KEY: Final[str] = os.getenv("OWM_API_KEY", "")
# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ .env, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—á–µ–±–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TELEGRAM_BOT_TOKEN: Final[str] = os.getenv("TELEGRAM_BOT_TOKEN", "")

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: TELEGRAM_CHAT_IDS –∏ —Å—Ç–∞—Ä—ã–π TELEGRAM_CHAT_ID
chat_ids_env = os.getenv("TELEGRAM_CHAT_IDS") or os.getenv("TELEGRAM_CHAT_ID") or ""
CHAT_IDS: Final[list[str]] = [cid.strip() for cid in chat_ids_env.split(",") if cid.strip()]

BAD_WORDS_FILE: Final[str] = os.getenv("BAD_WORDS_FILE", "bad_words.txt")

CITY_NAME: Final[str] = "Nizhny Novgorod"
TZ = ZoneInfo("Europe/Moscow")

if not OWM_API_KEY:
    raise SystemExit("‚õîÔ∏è –£–∫–∞–∂–∏—Ç–µ OWM_API_KEY –≤ .env")
if not CHAT_IDS:
    raise SystemExit("‚õîÔ∏è –£–∫–∞–∂–∏—Ç–µ TELEGRAM_CHAT_IDS –∏–ª–∏ TELEGRAM_CHAT_ID –≤ .env")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–∞—Ç‚Äë—Ñ–∏–ª—å—Ç—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_bad_regex() -> re.Pattern:
    path = Path(BAD_WORDS_FILE)
    if not path.is_file():
        path.write_text("# –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ regex-–ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ\n", encoding="utf-8")
        print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π {BAD_WORDS_FILE}. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
        return re.compile(r"$^")

    words = [ln.strip() for ln in path.read_text("utf-8").splitlines() if ln.strip() and not ln.startswith('#')]
    if not words:
        return re.compile(r"$^")
    combined = "|".join(fr"\b(?:{w})\b" for w in words)
    return re.compile(combined, re.IGNORECASE)

BAD_REGEX = load_bad_regex()

def censor(text: str) -> str:
    return BAD_REGEX.sub(lambda m: "*" * len(m.group(0)), text)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–≥–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def fetch_weather() -> str:
    current = requests.get(
        "https://api.openweathermap.org/data/2.5/weather",
        params={"q": CITY_NAME, "appid": OWM_API_KEY, "units": "metric", "lang": "ru"},
        timeout=10,
    )
    forecast = requests.get(
        "https://api.openweathermap.org/data/2.5/forecast",
        params={"q": CITY_NAME, "appid": OWM_API_KEY, "units": "metric", "lang": "ru"},
        timeout=10,
    )

    current.raise_for_status()
    forecast.raise_for_status()

    data = current.json()
    fdata = forecast.json()

    temp = data["main"]["temp"]
    feels = data["main"]["feels_like"]
    descr = data["weather"][0]["description"].capitalize()
    humidity = data["main"]["humidity"]
    wind = data["wind"]["speed"]
    sunrise = datetime.fromtimestamp(data["sys"]["sunrise"], tz=TZ).strftime("%H:%M")
    sunset = datetime.fromtimestamp(data["sys"]["sunset"], tz=TZ).strftime("%H:%M")
    today_fmt = datetime.now(tz=TZ).strftime("%Y-%m-%d")

    max_temp = max(
        f["main"]["temp_max"] for f in fdata["list"] if f["dt_txt"].startswith(today_fmt)
    )

    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {CITY_NAME} –Ω–∞ {datetime.now(tz=TZ).strftime('%d.%m.%Y')}:\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.0f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels:.0f}¬∞C)\n"
        f"{descr}. –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% | –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
        f"üå° –ú–∞–∫—Å–∏–º—É–º –¥–Ω—ë–º: {max_temp:.0f}¬∞C\n"
        f"üåÖ –†–∞—Å—Å–≤–µ—Ç: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}"
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–æ–¥–µ—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

VIOLATIONS = defaultdict(int)
MAX_WARNINGS = 3

async def profanity_filter(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg and msg.text and BAD_REGEX.search(msg.text):
        user_id = msg.from_user.id
        VIOLATIONS[user_id] += 1

        try:
            clean_text = censor(msg.text)
            await msg.delete()

            if VIOLATIONS[user_id] >= MAX_WARNINGS:
                await msg.chat.send_message(
                    text=f"üéÅ {msg.from_user.first_name}, –≤ —á–µ—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ç–∞—Ä–∞–Ω–∏–π ‚Äî –≤–∞–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–æ–∑–æ—á–∫–∞ üåπ."
                )
                VIOLATIONS[user_id] = 0
            else:
                await msg.chat.send_message(
                    text=(
                        f"‚ö†Ô∏è {msg.from_user.first_name}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–ª–æ –ø—Ä–∞–≤–∏–ª–∞ –∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.\n"
                        f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {clean_text}\n"
                        f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {VIOLATIONS[user_id]} –∏–∑ {MAX_WARNINGS}"
                    )
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–¥–∞—á–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def weather_job(ctx: ContextTypes.DEFAULT_TYPE):
    text = fetch_weather()
    for chat_id in CHAT_IDS:
        await ctx.bot.send_message(chat_id=chat_id, text=text)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main() -> None:
    app: Application = (
        ApplicationBuilder()
        .token(TELEGRAM_BOT_TOKEN)
        .build()
    )

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, profanity_filter))

    job_queue = app.job_queue
    job_queue.run_daily(weather_job, time=dtime(hour=8, minute=0, tzinfo=TZ))
    job_queue.run_daily(weather_job, time=dtime(hour=14, minute=0, tzinfo=TZ))

    print("‚úÖ Bot –∑–∞–ø—É—â–µ–Ω (–ø–æ–≥–æ–¥–∞ + —Ñ–∏–ª—å—Ç—Ä –º–∞—Ç–∞). –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _send_once() -> None:
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    text = fetch_weather()
    for chat_id in CHAT_IDS:
        await bot.send_message(chat_id=chat_id, text=text)

if __name__ == "__main__":
    if "--once" in sys.argv:
        asyncio.run(_send_once())
        print("üì® –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        try:
            main()
        except (KeyboardInterrupt, SystemExit):
            print("üõë Bot stopped.")
