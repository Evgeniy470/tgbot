#!/usr/bin/env python
"""
Telegram-–±–æ—Ç ¬´–ü–æ–≥–æ–¥–∞¬ª.
‚Ä¢ 07:00 –∏ 17:00 ‚Äî —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
‚Ä¢ 21:00 ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
‚Ä¢ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö chat-id –∏ (–æ–ø—Ü.) –º–∞—Ç-—Ñ–∏–ª—å—Ç—Ä
"""

from __future__ import annotations

import asyncio
import os
import re
import sys
from collections import defaultdict
from datetime import datetime, timedelta, time as dtime
from pathlib import Path
from typing import Final

import requests
from dotenv import load_dotenv
from telegram import Bot
from telegram.ext import (
    Application,
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
from zoneinfo import ZoneInfo, ZoneInfoNotFoundError

# ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

# –æ–±—Ä–µ–∑–∞–µ–º CR/LF –∏ –ø—Ä–æ–±–µ–ª—ã
OWM_API_KEY: Final[str] = (os.getenv("OWM_API_KEY") or "").strip()
TG_TOKEN:    Final[str] = (os.getenv("TELEGRAM_BOT_TOKEN") or "").strip()

# chat-id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é; –æ—Ç—Ä–µ–∑–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
_raw_chat = os.getenv("TELEGRAM_CHAT_IDS") or os.getenv("TELEGRAM_CHAT_ID") or ""
CHAT_IDS: Final[list[int]] = [
    int(part.split("#", 1)[0].strip())
    for part in _raw_chat.split(",")
    if part.split("#", 1)[0].strip()
]

CITY_NAME: Final[str] = (
    (os.getenv("CITY_NAME") or "Nizhny Novgorod").split("#", 1)[0].strip()
)

# —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
raw_tz = (os.getenv("TZ") or "Europe/Moscow").strip()
try:
    TZ = ZoneInfo(raw_tz)
except ZoneInfoNotFoundError:
    import tzdata  # noqa: F401

    TZ = ZoneInfo(raw_tz)

# (–æ–ø—Ü.) –º–∞—Ç-—Ñ–∏–ª—å—Ç—Ä
ENABLE_PROFANITY = os.getenv("ENABLE_PROFANITY_FILTER", "false").lower().startswith("t")
BAD_WORDS_FILE = os.getenv("BAD_WORDS_FILE", "bad_words.txt")

if not OWM_API_KEY:
    raise SystemExit("‚õîÔ∏è –í .env –Ω–µ—Ç OWM_API_KEY")
if not TG_TOKEN:
    raise SystemExit("‚õîÔ∏è –í .env –Ω–µ—Ç TELEGRAM_BOT_TOKEN")
if not CHAT_IDS:
    raise SystemExit("‚õîÔ∏è –í .env –Ω–µ—Ç TELEGRAM_CHAT_ID(S)")

# ‚îÄ‚îÄ‚îÄ –ú–∞—Ç-—Ñ–∏–ª—å—Ç—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if ENABLE_PROFANITY:
    def _load_bad_regex() -> re.Pattern:
        path = Path(BAD_WORDS_FILE)
        if not path.is_file():
            return re.compile(r"$^")
        words = [
            w.strip()
            for w in path.read_text("utf-8").splitlines()
            if w.strip() and not w.startswith("#")
        ]
        return re.compile("|".join(fr"\b(?:{w})\b" for w in words), re.IGNORECASE)

    BAD_RGX = _load_bad_regex()
    VIOL: dict[int, int] = defaultdict(int)
    MAX_WARN = 3

    async def profanity(update, ctx):
        msg = update.message
        if msg and msg.text and BAD_RGX.search(msg.text):
            uid = msg.from_user.id
            VIOL[uid] += 1
            await msg.delete()
            warn = f"‚ö†Ô∏è {msg.from_user.first_name}, –±–µ–∑ –º–∞—Ç–∞!"
            if VIOL[uid] >= MAX_WARN:
                warn += " (–º—É—Ç 1 —á)"
                await msg.chat.restrict_member(
                    uid, until_date=datetime.now().timestamp() + 3600
                )
            await msg.chat.send_message(warn)
else:
    profanity = None  # –∑–∞–≥–ª—É—à–∫–∞

# ‚îÄ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CARD = ["–°", "–°–í", "–í", "–Æ–í", "–Æ", "–Æ–ó", "–ó", "–°–ó"]


def _wdir(deg: float | None) -> str:
    return "" if deg is None else CARD[round(deg / 45) % 8]


def _ico(desc: str) -> str:
    d = desc.lower()
    return (
        "‚òÄÔ∏è" if "—è—Å–Ω–æ" in d
        else "‚õÖ" if "–æ–±–ª–∞—á–Ω–æ" in d
        else "‚òÅÔ∏è" if "–ø–∞—Å–º—É—Ä–Ω–æ" in d
        else "üåßÔ∏è" if "–¥–æ–∂–¥" in d
        else "‚õàÔ∏è" if "–≥—Ä–æ–∑–∞" in d
        else "‚ùÑÔ∏è" if "—Å–Ω–µ–≥" in d
        else "üå´Ô∏è" if ("—Ç—É–º–∞–Ω" in d or "–¥—ã–º–∫–∞" in d)
        else "üå°Ô∏è"
    )


def _get_json(url: str, params: dict) -> dict:
    try:
        r = requests.get(url, params=params, timeout=10)
        r.raise_for_status()
        js = r.json()
        if str(js.get("cod")) != "200":
            raise ValueError(js.get("message", f"bad code={js.get('cod')}"))
        return js
    except Exception as exc:
        print(f"[weather] API error: {exc}", file=sys.stderr)
        return {}


# ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–≥–æ–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_weather() -> str:
    now = datetime.now(tz=TZ)

    cur = _get_json(
        "https://api.openweathermap.org/data/2.5/weather",
        dict(q=CITY_NAME, appid=OWM_API_KEY, units="metric", lang="ru"),
    )
    fc = _get_json(
        "https://api.openweathermap.org/data/2.5/forecast",
        dict(q=CITY_NAME, appid=OWM_API_KEY, units="metric", lang="ru"),
    )

    if not cur or not fc:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    try:
        temp, feels = cur["main"]["temp"], cur["main"]["feels_like"]
        desc_raw = cur["weather"][0]["description"]
        descr = f"{_ico(desc_raw)} {desc_raw.capitalize()}"
        hum = cur["main"]["humidity"]

        wind = cur["wind"]["speed"]
        wdeg = cur["wind"].get("deg")
        wgust = cur["wind"].get("gust")
        wind_line = f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind:.0f} –º/—Å {_wdir(wdeg)}" + (
            f", –ø–æ—Ä—ã–≤—ã –¥–æ {wgust:.0f} –º/—Å" if wgust else ""
        )

        sunrise = datetime.fromtimestamp(cur["sys"]["sunrise"], TZ).strftime("%H:%M")
        sunset = datetime.fromtimestamp(cur["sys"]["sunset"], TZ).strftime("%H:%M")

        today = now.strftime("%Y-%m-%d")
        today_points = [p for p in fc["list"] if p["dt_txt"].startswith(today)]
        max_temp = max(p["main"]["temp_max"] for p in today_points)
        gusts = [p["wind"].get("gust", 0) for p in today_points]
        max_gust_line = f"üí® –ú–∞–∫—Å. –ø–æ—Ä—ã–≤—ã: –¥–æ {max(gusts):.0f} –º/—Å" if gusts else ""

        max_temp_line = (
            f"üå° –ú–∞–∫—Å–∏–º—É–º –¥–Ω—ë–º: {max_temp:.0f}¬∞C\n" if now.hour < 14 else ""
        )

        # –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (21 ¬± 1 —á)
        fc_block = ""
        if (now.hour > 20) or (now.hour == 20 and now.minute >= 0):
            tomorrow = (now + timedelta(days=1)).strftime("%Y-%m-%d")
            slots = {"üåÖ –£—Ç—Ä–æ": "06", "üåû –î–µ–Ω—å": "12", "üåÜ –í–µ—á–µ—Ä": "18", "üåô –ù–æ—á—å": "21"}
            lines = []
            for lbl, h in slots.items():
                p = next(
                    (i for i in fc["list"] if i["dt_txt"] == f"{tomorrow} {h}:00:00"),
                    None,
                )
                if p:
                    t = p["main"]["temp"]
                    d = p["weather"][0]["description"]
                    lines.append(f"{lbl}: {t:.0f}¬∞C, {_ico(d)} {d.capitalize()}")
            if lines:
                fc_block = "\n\nüìÖ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n" + "\n".join(lines)

        return (
            f"üå§ *–ü–æ–≥–æ–¥–∞ –≤ {CITY_NAME} –Ω–∞ {now:%d.%m.%Y}:*\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.0f}¬∞C _(–æ—â—É—â–∞–µ—Ç—Å—è {feels:.0f}¬∞C)_\n"
            f"{max_temp_line}"
            f"{descr}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {hum}%\n"
            f"{wind_line}\n"
            f"{max_gust_line}\n"
            f"üåÖ –†–∞—Å—Å–≤–µ—Ç: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}"
            f"{fc_block}"
        )

    except (KeyError, IndexError, TypeError) as exc:
        print(f"[weather] parse error: {exc}", file=sys.stderr)
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# ‚îÄ‚îÄ‚îÄ Job-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è JobQueue ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_weather(ctx: ContextTypes.DEFAULT_TYPE):
    text = fetch_weather()
    for cid in CHAT_IDS:
        await ctx.bot.send_message(cid, text, parse_mode="Markdown")


# ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    app: Application = ApplicationBuilder().token(TG_TOKEN).build()

    if ENABLE_PROFANITY:
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, profanity))

    jq = app.job_queue
    jq.run_daily(send_weather, dtime(7, 0, tzinfo=TZ))
    jq.run_daily(send_weather, dtime(17, 0, tzinfo=TZ))
    jq.run_daily(send_weather, dtime(21, 0, tzinfo=TZ))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    app.run_polling()


async def _once() -> None:
    bot = Bot(TG_TOKEN)
    txt = fetch_weather()
    for cid in CHAT_IDS:
        await bot.send_message(cid, txt, parse_mode="Markdown")
    print("üì® –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


if __name__ == "__main__":
    if "--once" in sys.argv:
        asyncio.run(_once())
    else:
        main()
