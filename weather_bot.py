# tgbot_weather.py
from __future__ import annotations

import asyncio, os, sys, re, requests, pytz
from collections import defaultdict
from datetime import datetime, timedelta, time as dtime
from pathlib import Path
from typing import Final

from dotenv import load_dotenv
from telegram import Bot
from telegram.ext import (
    Application, ApplicationBuilder, ContextTypes,
    MessageHandler, filters,
)
from zoneinfo import ZoneInfo

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

OWM_API_KEY : Final[str] = os.getenv("OWM_API_KEY", "")
TG_TOKEN    : Final[str] = os.getenv("TELEGRAM_BOT_TOKEN", "")
CITY_NAME   : Final[str] = os.getenv("CITY_NAME", "Nizhny Novgorod")
TZ          = ZoneInfo(os.getenv("TZ", "Europe/Moscow"))

chat_ids = os.getenv("TELEGRAM_CHAT_IDS") or os.getenv("TELEGRAM_CHAT_ID") or ""
CHAT_IDS : Final[list[int]] = [int(cid.strip()) for cid in chat_ids.split(",") if cid.strip()]

ENABLE_PROFANITY = os.getenv("ENABLE_PROFANITY_FILTER", "false").lower() == "true"
BAD_WORDS_FILE   = os.getenv("BAD_WORDS_FILE", "bad_words.txt")

if not OWM_API_KEY:
    raise SystemExit("‚õîÔ∏è  –£–∫–∞–∂–∏—Ç–µ OWM_API_KEY –≤ .env")
if not TG_TOKEN:
    raise SystemExit("‚õîÔ∏è  –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env")
if not CHAT_IDS:
    raise SystemExit("‚õîÔ∏è  –£–∫–∞–∂–∏—Ç–µ TELEGRAM_CHAT_ID(S) –≤ .env")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –º–∞—Ç-—Ñ–∏–ª—å—Ç—Ä (–æ–ø—Ü.) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if ENABLE_PROFANITY:
    def _load_regex() -> re.Pattern:
        p = Path(BAD_WORDS_FILE)
        if not p.is_file():                       # –Ω–µ—Ç —Ñ–∞–π–ª–∞ ‚Äî –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
            return re.compile(r"$^")
        words = [w.strip() for w in p.read_text("utf-8").splitlines()
                 if w and not w.startswith("#")]
        return re.compile("|".join(fr"\b(?:{w})\b" for w in words), re.IGNORECASE)

    BAD_RGX  = _load_regex()
    VIOL     = defaultdict(int)
    WARN_MAX = 3

    async def profanity(update, ctx):
        m = update.message
        if m and m.text and BAD_RGX.search(m.text):
            uid = m.from_user.id
            VIOL[uid] += 1
            await m.delete()
            warn = f"‚ö†Ô∏è {m.from_user.first_name}, –±–µ–∑ –º–∞—Ç–∞!"
            if VIOL[uid] >= WARN_MAX:
                warn += " (–º—É—Ç 1 —á)"
                await m.chat.restrict_member(uid, until_date=datetime.now().timestamp()+3600)
            await m.chat.send_message(warn)
else:
    profanity = None   # –∑–∞–≥–ª—É—à–∫–∞

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–≥–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CARD = ['–°','–°–í','–í','–Æ–í','–Æ','–Æ–ó','–ó','–°–ó']
def _wdir(deg: float|None) -> str:
    return "" if deg is None else CARD[round(deg/45)%8]

def _ico(desc: str) -> str:
    d = desc.lower()
    return ("‚òÄÔ∏è" if "—è—Å–Ω–æ"     in d else
            "‚õÖ" if "–æ–±–ª–∞—á–Ω–æ"   in d else
            "‚òÅÔ∏è" if "–ø–∞—Å–º—É—Ä–Ω–æ" in d else
            "üåßÔ∏è" if "–¥–æ–∂–¥"     in d else
            "‚õàÔ∏è" if "–≥—Ä–æ–∑–∞"    in d else
            "‚ùÑÔ∏è" if "—Å–Ω–µ–≥"     in d else
            "üå´Ô∏è" if "—Ç—É–º–∞–Ω" in d or "–¥—ã–º–∫–∞" in d else
            "üå°Ô∏è")

def fetch_weather() -> str:
    now = datetime.now(tz=TZ)

    cur = requests.get(
        "https://api.openweathermap.org/data/2.5/weather",
        params={"q": CITY_NAME, "appid": OWM_API_KEY,
                "units": "metric", "lang": "ru"},
        timeout=10,
    ).json()
    fc  = requests.get(
        "https://api.openweathermap.org/data/2.5/forecast",
        params={"q": CITY_NAME, "appid": OWM_API_KEY,
                "units": "metric", "lang": "ru"},
        timeout=10,
    ).json()

    temp, feels = cur["main"]["temp"], cur["main"]["feels_like"]
    desc_raw = cur["weather"][0]["description"]
    descr    = f"{_ico(desc_raw)} {desc_raw.capitalize()}"
    hum = cur["main"]["humidity"]

    wind      = cur["wind"]["speed"]
    wdeg      = cur["wind"].get("deg")
    wgust     = cur["wind"].get("gust")
    wind_line = f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind:.0f} –º/—Å {_wdir(wdeg)}" + (f", –ø–æ—Ä—ã–≤—ã –¥–æ {wgust:.0f} –º/—Å" if wgust else "")

    sunrise = datetime.fromtimestamp(cur["sys"]["sunrise"], TZ).strftime("%H:%M")
    sunset  = datetime.fromtimestamp(cur["sys"]["sunset"], TZ).strftime("%H:%M")

    today = now.strftime("%Y-%m-%d")
    max_temp = max(p["main"]["temp_max"] for p in fc["list"] if p["dt_txt"].startswith(today))
    gusts = [p["wind"].get("gust",0) for p in fc["list"] if p["dt_txt"].startswith(today)]
    max_gust_line = (f"üí® –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä—ã–≤—ã —Å–µ–≥–æ–¥–Ω—è: –¥–æ {max(gusts):.0f} –º/—Å"
                     if gusts else "")

    # üå° –ú–∞–∫—Å–∏–º—É–º –¥–Ω—ë–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ 14:00
    max_temp_line = (f"üå° –ú–∞–∫—Å–∏–º—É–º –¥–Ω—ë–º: {max_temp:.0f}¬∞C\n"
                     if now.hour < 14 else "")

    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ 21:00 ¬±1 —á)
    fc_block = ""
    if 20 <= now.hour <= 22:
        tomorrow = (now+timedelta(days=1)).strftime("%Y-%m-%d")
        slots = {"üåÖ –£—Ç—Ä–æ":"06","üåû –î–µ–Ω—å":"12","üåÜ –í–µ—á–µ—Ä":"18","üåô –ù–æ—á—å":"21"}
        lines=[]
        for lbl,h in slots.items():
            p = next((i for i in fc["list"] if i["dt_txt"]==f"{tomorrow} {h}:00:00"),None)
            if p:
                t = p["main"]["temp"]
                d = p["weather"][0]["description"]
                lines.append(f"{lbl}: {t:.0f}¬∞C, {_ico(d)} {d.capitalize()}")
        if lines:
            fc_block = "\n\nüìÖ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n" + "\n".join(lines)

    return (
        f"üå§ *–ü–æ–≥–æ–¥–∞ –≤ {CITY_NAME} –Ω–∞ {now:%d.%m.%Y}:*\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.0f}¬∞C _(–æ—â—É—â–∞–µ—Ç—Å—è {feels:.0f}¬∞C)_\n"
        f"{max_temp_line}"
        f"{descr}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {hum}%\n"
        f"{wind_line}\n"
        f"{max_gust_line}\n"
        f"üåÖ –†–∞—Å—Å–≤–µ—Ç: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}"
        f"{fc_block}"
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞—Å—Å—ã–ª–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_weather(ctx: ContextTypes.DEFAULT_TYPE):
    text = fetch_weather()
    for cid in CHAT_IDS:
        await ctx.bot.send_message(cid, text, parse_mode="Markdown")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    app: Application = ApplicationBuilder().token(TG_TOKEN).build()
    if ENABLE_PROFANITY:
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, profanity))
    jq = app.job_queue
    jq.run_daily(send_weather, dtime(7,  0, tzinfo=TZ))
    jq.run_daily(send_weather, dtime(17, 0, tzinfo=TZ))
    jq.run_daily(send_weather, dtime(21, 0, tzinfo=TZ))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    app.run_polling()

async def _once() -> None:
    bot = Bot(TG_TOKEN)
    txt = fetch_weather()
    for cid in CHAT_IDS:
        await bot.send_message(cid, txt, parse_mode="Markdown")
    print("üì®  –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

if __name__ == "__main__":
    if "--once" in sys.argv:
        asyncio.run(_once())
    else:
        main()
